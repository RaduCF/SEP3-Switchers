@page "/logindisplay"

@inject IJSRuntime jsRuntime

<AuthorizeView>
    <Authorized>
        <div class="text-center">
            <a href="manage"><p id="username">Hello, @context.User.Identity.Name</p></a>
            <button @onclick="Logout" class="nav-link btn btn-link">Log out</button>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="text-center">
            <a href="register"><p>Register</p></a>
            <a href="login">Login</a>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    public async Task Logout()
    {
        Console.WriteLine("Logout here");
        var interop = new Interop(jsRuntime);
        string antiforgerytoken = await interop.GetElementByName("__RequestVerificationToken");

        // Here I provide fields matching the arguments of my logout method, i.e. none. Could have a returnURL
        // see the example downloadable from here:
        // https://www.oqtane.org/Resources/Blog/PostId/527/exploring-authentication-in-blazor?fbclid=IwAR0rbQkY47cHHxs29HWCk0RggH7GHeLDx3kJ4vwmgUGMTsFU3hxpsQ9ybZo

        var fields = new { __RequestVerificationToken = antiforgerytoken };
        await interop.SubmitForm("/logoutRequester/", fields);
    }
}